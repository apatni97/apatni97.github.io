<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Akshat Patni</title>
    <link>/project/</link>
    <description>Recent content in Projects on Akshat Patni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploratory Data Analysis: Game of Thrones Characters</title>
      <link>/project/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project1/</guid>
      <description>Introduction In this study, Iâ€™ve applied some basic data manipulation and statistical methods to one of my favorite works of fiction, the Game of Thrones series by George R.R. Martin! In particular, I wanted to differentiate between the influence of characters between the books compared to the show, seeing as how the two stories have greatly diverged. I also wanted to see which characters were the most influential overall.</description>
    </item>
    
    <item>
      <title>Modeling, Testing, and Predicting: Diabetes Indicators amongst Pima Indian Females</title>
      <link>/project/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project2/</guid>
      <description>Introduction In this study, I found a dataset that contains several variables with medical statistics for a population of Pima Indian females. These numeric variables outline various health factors that can help indicate the likelihood of an individual having diabetes. These factors include their number of pregnancies, blood glucose levels, diastolic blood pressure, skin thickness (indicative of body fat), BMI, 2 hour serum insulin, BMI, age, and Diabetes Pedigree Function.</description>
    </item>
    
    <item>
      <title>Mud Motor Failure Python Analysis</title>
      <link>/project/project7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project7/</guid>
      <description>      </description>
    </item>
    
    <item>
      <title>OpenMP Parallel K-Means Research Paper</title>
      <link>/project/project5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project5/</guid>
      <description>      </description>
    </item>
    
    <item>
      <title>PEG Fusion Research Paper</title>
      <link>/project/project3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project3/</guid>
      <description>      </description>
    </item>
    
    <item>
      <title>Project Source Code</title>
      <link>/project/project6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project6/</guid>
      <description>Kmeans.cpp Source Code This program includes both the sequential and parallel implementations of the k-means algorithm. Added command line flags allow the user to either generate random points to be clustered, or use an points.txt file with a formatted list of points and output a clusters.txt file with the list of cluster centroids.
#include &amp;lt;iostream&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;random&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;iterator&amp;gt; #include &amp;lt;chrono&amp;gt; // struct point struct point { double x, y; double sqr_dist(const point&amp;amp; p) const { double dx = p.</description>
    </item>
    
  </channel>
</rss>
